#7th - Develop a Bayesian classifier.


import pandas as pd
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
# Load breast cancer dataset from sklearn
data = load_breast_cancer()
# Convert to DataFrame
df = pd.DataFrame(data.data, columns=data.feature_names)
df['target'] = data.target
# Display the first few rows of the dataset
# to understand its structure
print(df.head())
# Separate features and target
X = df.drop('target', axis=1) # Features
y = df['target'] # Target
# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
# Split the dataset into training and test sets
X_train, X_test, y_train, y_test =train_test_split(X_scaled, y,
test_size=0.2,
random_state=42)
# Define the parameter grid
param_grid = {
'var_smoothing': [1e-9, 1e-8, 1e-7, 1e-6, 1e-5]
}
# Initialize the Gaussian Naive Bayes classifier
bayes = GaussianNB()
# Initialize GridSearchCV with
# 5-fold cross-validation
grid_search = GridSearchCV(estimator=bayes,
param_grid=param_grid, cv=5)
# Perform hyperparameter tuning
grid_search.fit(X_train, y_train)
# Get the best hyperparameters
best_params = grid_search.best_params_
# Train the model with the best hyperparameters
best_bayes = GaussianNB(**best_params)
best_bayes.fit(X_train, y_train)
# Predict on the test set
y_pred = best_bayes.predict(X_test)
# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Test Accuracy:", accuracy)
